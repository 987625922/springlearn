<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--  ==============================  -->
    <!--  整合Shiro示例实现动态权限加载更新+Session共享+单点登录  -->
    <!--  ==============================  -->
    <context:component-scan base-package="org.learn.shiro"/>

    <mvc:annotation-driven/>

    <!-- 配置  -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--    * 开启Shiro-aop注解支持-->
    <!--    * @Attention 使用代理方式所以需要开启代码支持-->
    <bean id="authorizationAttributeSourceAdvisor"
          class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--    Shiro基础配置-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="filterChainDefinitionMap">
            <!--              // 注意过滤器配置顺序不能颠倒      -->
            <map>
                <!--      // 配置过滤:不会被拦截的链接          -->
                <entry key="/static/**" value="anon"/>
                <entry key="/userLogin/**" value="anon"/>
                <entry key="/**" value="authc"/>
            </map>
        </property>
        <!--        // 配置shiro默认登录界面地址，前后端分离中登录界面跳转应由前端路由控制，后台仅返回json数据-->
        <property name="loginUrl" value="/userLogin/unauth"/>
    </bean>

    <!--  安全管理器  -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--        // 自定义Ssession管理-->
        <property name="sessionManager" ref="sessionManager"/>
        <!--        // 自定义Cache实现-->
        <property name="cacheManager" ref="cacheManager"/>
        <!--        // 自定义Realm验证-->
        <property name="realm" ref="shiroRealm"/>
    </bean>

    <!--  身份验证器  -->
    <bean id="shiroRealm" class="org.learn.shiro.shiro.ShiroRealm">
        <property name="credentialsMatcher" ref="hashedCredentialsMatcher"/>
    </bean>

    <!--       * 凭证匹配器
         * 将密码校验交给Shiro的SimpleAuthenticationInfo进行处理,在这里做匹配配置  -->
    <bean id="hashedCredentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <!--   // 散列算法:这里使用SHA256算法;     -->
        <property name="hashAlgorithmName" value="SHA-256"/>
        <!--    // 散列的次数，比如散列两次，相当于 md5(md5(""));    -->
        <property name="hashIterations" value="15"/>
    </bean>

    <!--       * 配置Cache管理器
         * 用于往Redis存储权限和角色标识
         * @Attention 使用的是shiro-redis开源插件  -->
    <bean id="cacheManager" class="org.crazycake.shiro.RedisCacheManager">
        <property name="redisManager" ref="redisManager"/>
        <property name="keyPrefix" value="shiro:cache:"/>
        <!--   // 配置缓存的话要求放在session里面的实体类必须有个id标识     -->
        <property name="principalIdFieldName" value="userId"/>
    </bean>

    <!--  配置Session管理器  -->
    <bean id="sessionManager" class="org.learn.shiro.shiro.ShiroSessionManager">
        <property name="sessionDAO" ref="sessionDAO"/>
    </bean>

    <!--  配置RedisSessionDAO
          @Attention 使用的是shiro-redis开源插件  -->
    <bean id="sessionDAO" class="org.crazycake.shiro.RedisSessionDAO">
        <property name="redisManager" ref="redisManager"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
        <property name="keyPrefix" value="shiro:session:"/>
        <property name="expire" value="${redis.timeout}"/>
    </bean>

    <!--  配置Redis管理器  -->
    <bean id="redisManager" class="org.crazycake.shiro.RedisManager">
        <property name="host" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="timeout" value="${redis.timeout}"/>
        <property name="password" value="${redis.pass}"/>
    </bean>

    <!--  SessionID生成器  -->
    <bean id="sessionIdGenerator" class="org.learn.shiro.shiro.ShiroSessionIdGenerator">
    </bean>
</beans>