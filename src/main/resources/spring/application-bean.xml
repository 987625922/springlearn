<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
>

    <!-- 自动扫描包名下的Component的bean -->
    <context:component-scan base-package="com.wind.spring.springbean"/>
    <context:component-scan base-package="com.wind.spring.other"/>

    <!-- springbean bean 的学习  -->
    <!-- 学习网站https://www.imooc.com/video/3665 -->
    <!-- 笔记 https://github.com/987625922/springlearn-->


    <!-- lazy-init 默认为false 只对singleton有效，默认false，为true时，在类使用时bean才创建 -->
    <!-- init-method  在对象创建时，执行这个方法-->
    <!-- destroy-method 在对象销毁时，执行这个方法 -->
    <!-- Scope默认是单例模式，即scope="singleton",另外scope还有prototype、request、session、global session作用域 -->
    <bean id="userbean" class="com.wind.spring.other.bean.User"
          scope="singleton" init-method="init"
          destroy-method="myDestroy"
          p:userName="bean方法p标签的使用"
    >
        <!-- 设值注入 -->
        <property name="book" ref="book"/>
        <property name="city">
            <null/>
        </property>

        <!-- 构造器注入-->
        <constructor-arg name="beanName" value="这个是bean的名称"/>
    </bean>

    <bean id="book" class="com.wind.spring.other.bean.Book"/>
    <!-- 第三 bean的自动装配-->
    <!-- 在xml头添加default-autowire="byName" 或者在bean中配置autowire="constructor" -->
    <bean id="autobean" class="com.wind.spring.other.bean.AutoWiringBean" autowire="constructor"/>

    <!-- Aware的使用 -->
    <bean id="springContextAware" class="com.wind.spring.springbean.aware.SpringContextAware"/>

    <!-- Resources spring对资源访问 -->
    <bean id="learnResource" class="com.wind.spring.other.resource.LearnResource"/>


    <!-- =============   aop ===============   -->
    <!-- spring基于JDK 代理和 CGLIB 代理两种动态代理，如果目标对象有实现接口，使用 JDK 代理。如果目标对象没有实现接口，则使用 CGLIB 代理。 -->

    <context:component-scan base-package="com.wind.spring.springaop"/>

    <!-- 启动AspectJ自动代理,即基于注解的aop使用-->
    <aop:aspectj-autoproxy/>

    <!-- 实例化切面类（就是增强方法所在的类） -->
    <bean id="transactionAop" class="com.wind.spring.springaop.base.TransactionAop"></bean>

    <!-- Aop相关配置 -->
    <aop:config>
        <!-- 切入点表达式定义（定义了一个id为transactionPointcut的切点表达式） -->
        <aop:pointcut expression="execution(* com.wind.spring.springaop.base.*Dao.*(..))"
                      id="transactionPointcut"/>
        <!-- 切面配置 ref使用id为transactionAop的bean为增强方法的bean -->
        <aop:aspect ref="transactionAop">
            <!-- 【环绕通知】 -->
            <aop:around method="arroud" pointcut-ref="transactionPointcut"/>
            <!-- 【前置通知】 在目标方法之前执行 -->
            <aop:before method="beginTransaction" pointcut-ref="transactionPointcut"/>
            <!-- 【后置通知】 -->
            <aop:after method="commit" pointcut-ref="transactionPointcut"/>
            <!-- 【返回后通知】 -->
            <aop:after-returning method="afterReturing" pointcut-ref="transactionPointcut"/>
            <!-- 异常通知 -->
            <aop:after-throwing method="afterThrowing" pointcut-ref="transactionPointcut"/>
        </aop:aspect>
    </aop:config>


</beans>