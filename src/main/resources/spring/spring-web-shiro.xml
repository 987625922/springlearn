<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:component-scan base-package="com.wind.spring.springshiro"/>

    <!-- jdbc配置  -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- druid 配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置监控统计拦截的filters -->
        <!--<property name="filters" value="stat" />-->

        <!-- 配置初始化大小、最小、最大 -->
        <property name="maxActive" value="20"/>
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <!--<property name="poolPreparedStatements" value="true" />-->
        <!--<property name="maxOpenPreparedStatements" value="20" />-->
    </bean>


    <!-- =========== mybatis =============== -->
    <!-- 1.配置SqlSessionFactory对象（把连接池对象导入到mybatis中） -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 扫描entity包 使用别名 -->
        <property name="typeAliasesPackage" value="com.wind.spring.springshiro.project.domain"/>
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <!--<property name="mapperLocations" value="classpath:mapper/*.xml"/>-->
    </bean>

    <!-- 2.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="com.wind.spring.springshiro.project.dao"/>
    </bean>
    <!-- =========== mybatis =============== -->

    <!-- 事务 -->
    <bean id="txManage" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--引用数据库连接池-->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <tx:annotation-driven transaction-manager="txManage"/>

    <!--        shiro              -->

    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userShiroRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>


    <!-- 自定义域 -->
    <bean id="userShiroRealm" class="com.wind.spring.springshiro.project.config.CustomRealm">
        <property name="credentialsMatcher" ref="hashedCredentialsMatcher"/>
    </bean>

    <!-- 自定义凭证(密码)匹配器 -->
    <bean id="hashedCredentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
    </bean>

    <!-- session管理器 -->
    <!--在shiro的DefaultWebSessionManager类中，默认Cookie名称是JSESSIONID，这样的话与servlet容器名冲突,
    如jetty, tomcat等默认JSESSIONID, 当跳出shiro servlet时如error-page容器会为JSESSIONID重新分配值导致登录会话丢失!-->
    <bean id="sessionManager" class="com.wind.spring.springshiro.project.config.CustomSessionManager">
        <property name="sessionIdCookie" ref="simpleCookie"/>
    </bean>
    <bean id="simpleCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg name="name" value="shiro.sesssion"/>
        <property name="path" value="/"/>
    </bean>

    <!-- Shiro的web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!--//必须设置securityManager-->
        <property name="securityManager" ref="securityManager"/>
        <!--//需要登录的接口，如果访问某个接口，需要登录却没登录，则调用此接口(如果不是前后端分离，则跳转页面)-->
        <property name="loginUrl" value="/pub/need_login"/>
        <!--//登录成功，跳转url，如果前后端分离，则没这个调用-->
        <property name="successUrl" value="/"/>
        <!--//没有权限，未授权就会调用此方法， 先验证登录-》再验证是否有权限-->
        <property name="unauthorizedUrl" value="/pub/not_permit"/>
        <property name="filterChainDefinitions">
            <value>
                <!--//退出过滤器-->
                /logout = logout
                <!-- //匿名可以访问，也是就游客模式 -->
                /pub/** = anon
                <!-- //登录用户才可以访问 -->
                /authc/** = authc
                <!-- //管理员角色才可以访问 -->
                /admin/** = roles[admin]
                <!-- //有编辑权限才可以访问 -->
                /video/update = perms[video_update]
                <!--//坑二: 过滤链是顺序执行，从上而下，一般讲/** 放到最下面-->
                <!--//authc : url定义必须通过认证才可以访问-->
                <!--//anon  : url可以匿名访问-->
                /** = authc
            </value>
        </property>
    </bean>


</beans>